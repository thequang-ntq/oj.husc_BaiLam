#pragma GCC optimize("03,unroll-loops")
#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
#define MO ios_base::sync_with_stdio(false); cin.tie(nullptr)
#define MAX(a, b) ( (a > b) ? a : b)
#define MIN(a, b) ( (a < b) ? a : b)
#define MOD 9929
#define div6 166666668
#define mod 998244353
#define ll long long
#define taskname "__Quang__"
#define double long double
using namespace std;
using ull = unsigned long long;
const int inf = 1e9;
const int maxn = 1e5 + 7;
const double Pi = 3.1415926535897323846;
const double eps = 1e-9;
int sign(double x){
	if(x > eps) return 1;
	if(x < -eps) return -1;
	return 0;
}
long long __lcm(int a, int b){
	return (a / __gcd(a,b)) * b;
}
struct Point{
	double x,y;
	Point(){x=y=0.0;}
	Point(double x, double y): x(x), y(y){}
	Point operator + (const Point &a)
		const{return Point(x + a.x, y + a.y);}
	Point operator - (const Point &a)
		const{return Point(x - a.x, y - a.y );}
	Point operator * (double k)
		const{return Point(x*k, y*k); }
	Point operator / (double k)
		const{return Point(x/k, y/k);}
	double dot(const Point & other){
		return x*other.x + y*other.y;
	}
	double cross(const Point &other){
		return x * other.y - y*other.x;
	}
	double length() const{
		return sqrt(x * x + y * y);
	}
};

bool intersected(Point A, Point B, Point C, Point D){
	Point X = B-A;
	Point Y = D-C;
	int ABxAC = sign(X.cross(C-A));
	int ABxAD = sign(X.cross(D-A));
	int CDxCA = sign(Y.cross(A-C));
	int CDxCB = sign(Y.cross(B-C));
	if(ABxAC==0 || ABxAD ==0 || CDxCA ==0 || CDxCB==0){
		if (ABxAC == 0 && sign((A-C).dot( B - C)) <= 0) return true;
        if (ABxAD == 0 && sign((A-D).dot(B - D)) <= 0) return true;
        if (CDxCA == 0 && sign((C-A).dot(D - A)) <= 0) return true;
        if (CDxCB == 0 && sign((C-B).dot(D - B)) <= 0) return true;
        return false;
	}
	return (ABxAC * ABxAD < 0 && CDxCA * CDxCB < 0);
}
struct line{
	double a,b,c;
	line(double a =0, double b =0, double c =0): a(a), b(b), c(c){}
	line(Point A, Point B){
		a = B.y - A.y;
		b = A.x - B.x;
		c = a*A.x + b*A.y;
	}
};
Point giao_diem(line d1, line d2){
	double det = d1.a * d2.b - d2.a * d1.b;
	return Point((d2.b*d1.c - d1.b*d2.c) / det, (d1.a*d2.c - d2.a*d1.c) / det);
}
bool cmp(Point a, Point b){
	return a.x < b.x;
}
bool cmp2(Point a, Point b){
	return a.y < b.y;
}
double dientich(Point A, Point B, Point C){
	return (0.5*abs((C.x-A.x)*(B.y-A.y)-(B.x-A.x)*(C.y-A.y)));
}
vector<Point>vec;
vector<Point>dp;
int main() {
	MO;
	if(fopen("countdivisor.inp","r")){
		freopen("countdivisor.inp","r", stdin);
		freopen("countdivisor.out","w", stdout);
	}
	cout<<fixed<<setprecision(4);
	int t; cin>>t;
	int n = t;
	while(t--){
		double x,y; cin>>x>>y;
		vec.push_back({x,y});
//		vec2.push_back({x,y});
		dp.push_back({x,y});
	}
	double area1 =0, area2 = 0, area = 0;
	Point p1(vec[0].x, vec[0].y);
	Point p2(vec[1].x, vec[1].y); 
	for(int i =0; i < vec.size()-1; i++ ){
		area += dientich(vec[0], vec[i], vec[i+1]);		
	}
	Point f1,f2,f3,f4;
	for(int i = 1 ; i< vec.size()-1; i++){
		area1 += dientich(p1, vec[i], vec[i+1]);
//		cout<<area1<<'\n';
		if(fabs(area1 - area/2) <= 1e-6){
			f1.x = p1.x; f1.y = p1.y;
			f2.x = vec[i+1].x; f2.y = vec[i+1].y;
//			cout<<f1.x<<" "<<f1.y<<" "<<f2.x<<" "<<f2.y<<'\n';
			break;
		}
	}
	vec.push_back({p1.x,p1.y});
	for(int i = vec.size()-1; i > 2 ; i--){
		area2 += dientich(p2, vec[i], vec[i-1]);
//		cout<<area2<<'\n';
		if(fabs(area2 - area/2) <= 1e-6){
			f3.x = p2.x; f3.y = p2.y;
			f4.x = vec[i-1].x; f4.y = vec[i-1].y;
//			cout<<f3.x<<" "<<f3.y<<" "<<f4.x<<" "<<f4.y<<'\n';
			break;
		}
	}
	line d1(f1,f2);
	line d2(f3,f4);
	Point gd = giao_diem(d1,d2);
//	cout<<p1.x<<" "<<p1.y<<" "<<p2.x<<" "<<p2.y<<" "<<p3.x << " "<<p3.y << " "<<p4.x << " " << p4.y <<'\n';
	if(n==3){
		cout<< (dp[0].x + dp[0].y) /2 * 1.0 <<'\n';
	}
	else cout<<gd.x<<'\n';
	return 0;
}
