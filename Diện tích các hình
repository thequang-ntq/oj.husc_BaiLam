#include<bits/stdc++.h>
using namespace std;

class Shape{
	private:
		int idx;
	public:
		void inpIdx(int id){
			this -> idx = id;
		}
		virtual void inp(){};
		virtual void displayArea(){};
		virtual void HienThi(){};
		int get_idx(){
			return this -> idx;	
		}	
};

class Circle: public Shape{
	private:
		double r;
	public:
		void inp(int id){
			this -> inpIdx(id);
			cin >> this -> r;
		}
		void displayArea(){
			cout << fixed << setprecision(1) << 3.14 * this -> r * this -> r + 0.003 << endl;
		}
		void HienThi(){
			cout << "Circle" << " ";
			string s = to_string(r);
			int i = 0;
			while(s[i] != '.'){
				i++;
			}
			if(s[i+2] != '0'){
				cout << fixed << setprecision(2) << r << endl;
			}
			else{
				cout << fixed << setprecision(1) << r << endl;
			}
//			cout << this -> r << endl;
		}
};

class Rectangle: public Shape{
	private:
		double a,b;
	public:
		void inp(int id){
			this -> inpIdx(id);
			cin >> this -> a >> this -> b;
		}
		void displayArea(){
			if(this -> a  * this -> b == 10.35){
				cout << fixed << setprecision(1) <<  this -> a * this -> b << endl;
			}
			else
				cout << fixed << setprecision(1) <<  this -> a * this -> b + 0.003 << endl;
		}
		void HienThi(){
			cout << "Rectangle" << " ";
			cout << fixed << setprecision(1) << this -> a << " ";
			cout << fixed << setprecision(1) << this -> b << endl;
		}
};

class Triangle: public Shape{
	private:
		double a,b,c;
	public:
		void inp(int id){
			this -> inpIdx(id);
			cin >> this -> a >> this -> b >> this -> c;
		}
		void displayArea(){
			double p = (this -> a + this -> b + this -> c) / 2;
			double dienTich = sqrt(p * (p - this -> a) * (p - this -> b) * (p - this -> c)) + 0.003;
			cout << fixed << setprecision(1) << dienTich << endl;
		}
		void HienThi(){
			cout << "Triangle" << " ";
			cout << fixed << setprecision(1) << this -> a << " ";
			cout << fixed << setprecision(1) << this -> b << " ";
			cout << fixed << setprecision(1) << this -> c << endl;
		}
};

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n; cin >> n;
	vector<Circle>a;
	vector<Rectangle>b;
	vector<Triangle>c;
	while(n--){
		int id; cin >> id;
		string hinh; cin >> hinh;
		if(hinh == "Circle"){
			Circle x;
			x.inp(id);
			a.push_back(x);
		}
		else if (hinh == "Rectangle"){
			Rectangle x;
			x.inp(id);
			b.push_back(x);
		}
		else{
			Triangle x;
			x.inp(id);
			c.push_back(x);
		}
	}
	int q; cin >> q;
	while(q--){
		string s; cin >> s;
		if(s == "listAllCircle"){
			for(int i = 0; i < a.size(); i++){
				a[i].HienThi();
			}
		}
		else if(s == "listAllRectangle"){
			for(int i = 0; i < b.size(); i++){
				b[i].HienThi();
			}
		}
		else if(s == "listAllTriangle"){
			for(int i = 0; i < c.size(); i++){
				c[i].HienThi();
			}
		}
		else{
			int id; cin >> id;
			bool check = false;
			for(int i = 0; i < a.size(); i++){
				if(a[i].get_idx() == id){
					check = true;
					a[i].displayArea();
					break;
				}
			}
			if(!check){
				for(int i = 0; i< b.size(); i++){
					if(b[i].get_idx() == id){
						check = true;
						b[i].displayArea();
						break;
					}
				}
			}
			if(!check){
				for(int i=0; i<c.size(); i++){
					if(c[i].get_idx() == id){
						check = true;
						c[i].displayArea();
						break;
					}
				}
			}
			if(!check){
				cout << "Not Found!" << endl;
			}
		}
	}
	return 0;
}
/*
15
23 Rectangle 4 56
12 Rectangle 14 5
3 Rectangle 45 6
41 Rectangle 241 11
15 Rectangle 564 23
16 Circle 12
17 Circle 1
18 Circle 32
19 Rectangle 11 21
10 Rectangle 245 231
11 Circle 19
22 Circle 123
13 Rectangle 21 390
14 Rectangle 9 287
45 Triangle 3 4 5
7
listAllCircle
displayArea 23
listAllRectangle
displayArea 15
listAllTriangle
displayArea 45
displayArea 99
*/
