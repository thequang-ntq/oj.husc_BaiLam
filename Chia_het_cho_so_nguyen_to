#pragma GCC optimize("03,unroll-loops")
#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
#define MO ios_base::sync_with_stdio(false); cin.tie(nullptr)
#define MAX(a, b) ( (a > b) ? a : b)
#define MIN(a, b) ( (a < b) ? a : b)
#define MOD 1000000007
#define div6 166666668
#define mod 998244353
#define ll long long
#define double long double
//#define cas(x,i) ({case x:cout<<i;break;} )
#define taskname "__Quang__"

using namespace std;
using ull = unsigned long long;
//using cas(x,i)  = (case x: cout<<i;break)
const int inf = 1e9;
const int maxn = 2e5 + 7;
ll __lcm(int a, int b){
	return (a / __gcd(a,b)) * b;
}
//Bitmasks
const double eps = 0.001;
ll a[21];
const double phi = 1.618034;
int main() {
	MO;
	if(fopen("countdivisor.inp","r")){
		freopen("countdivisor.inp","r", stdin);
		freopen("countdivisor.out","w", stdout);
	}
	ll n,k; cin>>n>>k;
	for(int i =0; i<k; i++) cin>>a[i];
	ll cnt = n;
	double R = log(n) + eps;
	for(int i = 0; i< (1<<k); i++ ){
		bool odd = (__builtin_popcount(i)&1);//dem so luong bit 0 ben trong so
		ll res = 1;
		double L = 0.0;
		for(int j =0; j<k; j++){
			if(i&(1<<j)){// bit thu j cua so la 1
				L += log(a[j]);
				res *= a[j];
			}
		}
		if(L < R){
			if(odd){
				cnt += 1 * (n/res);
			}
			else{
				cnt += -1 * (n/res);
			}
		}
	}
	cout<<cnt;
	return 0;
}
