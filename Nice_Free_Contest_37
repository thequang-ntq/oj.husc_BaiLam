#include <bits/stdc++.h>
#define pii pair<int , int>
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define BIT(x,i) (1&((x)>>(i)))
#define MASK(x)  (1LL<<(x))
#define CNT(x) __builtin_popcountll(x)
#define task "tnc"  

using namespace std;
int maxMask , m , mod;
string n;

void add(int &x , const int &y)
{
    x += y;
    if(x >= mod) x -= mod;
}
void sub(int &x , const int &y)
{
    x -= y;
    if(x < 0) x += mod;
}
int PRODUCT(int x , int y)
{
    int res = x * y;
    if(res >= mod) res %= mod;
    return res;
}

struct matrix 
{
    int c[32][32];
    matrix()
    {
        memset(c , 0 , sizeof(c));
    }
    matrix operator * (const matrix &b)
    {
        matrix res;
        matrix a = *this;
        for(int i=0 ; i<maxMask ; ++i) for(int j=0 ; j<maxMask ; ++j)
        {
            res.c[i][j] = 0;
            for(int k=0 ; k<maxMask ; ++k)
            {
                add(res.c[i][j] , PRODUCT(a.c[i][k] , b.c[k][j]));
            }
        }
        return res;
    }
    matrix power(int k)
    {
        if(k == 1) return *this;
        matrix res = power(k/2);
        res = res * res;
        if(1&k) res = res * (*this);
        return res;
    }
}pw[220];

int check(int mask1 , int mask2)
{
    for(int i=1 ; i<m ; ++i)
    {
        int sum = BIT(mask1 , i) + BIT(mask1 , i-1) + BIT(mask2 , i) + BIT(mask2 , i-1);
        if(sum == 0 || sum == 4) return false;
    }
    return true;
}

void solve()
{
    cin >> n >> m >> mod;
    if(n == "1")
    {
        cout << (1<<m) % mod;
        return;
    }

    for(int i=(int)n.length()-1 ; i>=0 ; --i)
    {
        if(n[i] == '0')
        {
            n[i] = '9';
        }
        else 
        {
            n[i]--;
            break;
        }
    }
    while((int)n.length() > 1 && n[0] == '0') n.erase(0 , 1);

    maxMask = (1<<m);
    reverse(n.begin() , n.end());
    int len = (int)n.size()-1;
    for(int mask1 = 0 ; mask1 < maxMask ; ++mask1) 
    {
        for(int mask2 = 0 ; mask2 < maxMask ; ++mask2)
        {
            pw[0].c[mask1][mask2] = check(mask1 , mask2);
        }
    }
    for(int i=1 ; i<=len ; ++i) pw[i] = pw[i-1].power(10);
    bool found = false;
    matrix tmp;
    for(int i=0 ; i<=len ; ++i)
    {
        if(n[i] == '0') continue;
        if(!found)
        {
            found = true;
            tmp = pw[i].power(n[i] - '0');
        }
        else tmp = tmp * pw[i].power(n[i] - '0');
    }
    int res = 0;
    for(int mask1 = 0 ; mask1 < maxMask ; ++mask1) 
    {
        for(int mask2 = 0 ; mask2 < maxMask ; ++mask2)
        {
            add(res , tmp.c[mask1][mask2]);
        }
    }
    cout << res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //freopen(task".inp" , "r" , stdin);
    //freopen(task".out" , "w" , stdout);
    solve();
    return 0;
}
